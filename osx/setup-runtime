#!/bin/bash
set -e

SELFDIR=`dirname "$0"`
SELFDIR=`cd "$SELFDIR" && pwd`
source "$SELFDIR/internal/essentials.sh"
source "$SELFDIR/internal/library.sh"

RUNTIME_DIR=
CONCURRENCY=4
FORCE_OPENSSL=false
SKIP_OPENSSL=false
FORCE_NCURSES=false
SKIP_NCURSES=false
FORCE_LIBEDIT=false
SKIP_LIBEDIT=false
FORCE_GMP=false
SKIP_GMP=false
FORCE_RUBY=false
SKIP_RUBY=false

function usage()
{
	echo "Usage: ./setup-runtime [options] <RUNTIME DIR>"
	echo "Sets up the Traveling Ruby build system's runtime."
	echo
	echo "Options:"
	echo "  -o      Force installing OpenSSL"
	echo "  -O      Skip installing OpenSSL"
	echo "  -n      Force installing ncurses"
	echo "  -N      Skip installing ncurses"
	echo "  -e      Force installing libedit"
	echo "  -E      Skip installing libedit"
	echo "  -e      Force installing GMP"
	echo "  -E      Skip installing GMP"
	echo
	echo "  -j NUM  Compilation concurrency. Default: 4"
	echo "  -h      Show this help"
}

function parse_options()
{
	local OPTIND=1
	local opt
	while getopts "oOnNeEgGj:h" opt; do
		case "$opt" in
		o)
			FORCE_OPENSSL=true
			;;
		O)
			SKIP_OPENSSL=true
			;;
		n)
			FORCE_NCURSES=true
			;;
		N)
			SKIP_NCURSES=true
			;;
		e)
			FORCE_LIBEDIT=true
			;;
		E)
			SKIP_LIBEDIT=true
			;;
		g)
			FORCE_GMP=true
			;;
		G)
			SKIP_GMP=true
			;;
		j)
			CONCURRENCY=$OPTARG
			;;
		h)
			usage
			exit
			;;
		*)
			return 1
			;;
		esac
	done

	(( OPTIND -= 1 )) || true
	shift $OPTIND || true
	RUNTIME_DIR="$1"

	if [[ "$RUNTIME_DIR" = "" ]]; then
		usage
		exit 1
	fi
}

parse_options "$@"
RUNTIME_DIR="`cd \"$RUNTIME_DIR\" && pwd`"


#######################################


OPENSSL_VERSION=1.0.1j
NCURSES_VERSION=5.9
LIBEDIT_VERSION=20141030-3.1
LIBEDIT_DIR_VERSION=20141029-3.1
GMP_VERSION=6.0.0a
GMP_DIR_VERSION=6.0.0
RUBY_MAJOR_MINOR=2.1
RUBY_VERSION=2.1.5
export PATH="$RUNTIME_DIR/bin:$PATH"
export LIBRARY_PATH="$RUNTIME_DIR/lib"
export DYLD_LIBRARY_PATH="$RUNTIME_DIR/lib"
export PKG_CONFIG_PATH="$RUNTIME_DIR/lib/pkgconfig:/usr/lib/pkgconfig"
export RUNTIME_DIR
export DEAD_STRIP=true


header "Initializing..."
run mkdir -p "$RUNTIME_DIR"
echo "Entering $RUNTIME_DIR"
cd "$RUNTIME_DIR"
echo

header "Compiling runtime libraries 1/4: OpenSSL..."
if $SKIP_OPENSSL; then
	echo "Skipped."
elif [[ ! -e "$RUNTIME_DIR/bin/openssl" ]] || $FORCE_OPENSSL; then
	run rm -f openssl-$OPENSSL_VERSION.tar.gz
	run curl --fail -L -O http://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz
	run tar xzf openssl-$OPENSSL_VERSION.tar.gz
	run rm openssl-$OPENSSL_VERSION.tar.gz
	echo "Entering $RUNTIME_DIR/openssl-$OPENSSL_VERSION"
	pushd openssl-$OPENSSL_VERSION >/dev/null

	run ./Configure darwin64-x86_64-cc --prefix="$RUNTIME_DIR" --openssldir="$RUNTIME_DIR/openssl" \
		threads zlib shared no-sse2
	run make
	run make install_sw
	echo "Entering $RUNTIME_DIR"
	popd >/dev/null
	run rm -rf openssl-$OPENSSL_VERSION

	run chmod u+rw lib/*.dylib
	run rm lib/libcrypto.a
	run rm lib/libssl.a
	run strip bin/openssl
	run strip -S lib/libcrypto.dylib
	run strip -S lib/libssl.dylib
	run install_name_tool -id "@executable_path/../lib/libssl.1.0.0.dylib" \
		"$RUNTIME_DIR/lib/libssl.1.0.0.dylib"
	run install_name_tool -change \
		"$RUNTIME_DIR/lib/libcrypto.1.0.0.dylib" "@executable_path/../lib/libcrypto.1.0.0.dylib" \
		"$RUNTIME_DIR/lib/libssl.1.0.0.dylib"
	run install_name_tool -id "@executable_path/../lib/libcrypto.1.0.0.dylib" \
		"$RUNTIME_DIR/lib/libcrypto.1.0.0.dylib"
else
	echo "Already installed."
fi
echo

header "Compiling runtime libraries 2/4: ncurses..."
if $SKIP_NCURSES; then
	echo "Skipped."
elif [[ ! -e "$RUNTIME_DIR/lib/libncurses.dylib" ]] || $FORCE_NCURSES; then
	run rm -f ncurses-$NCURSES_VERSION.tar.bz2
	run curl --fail -L -O http://ftp.gnu.org/pub/gnu/ncurses/ncurses-$NCURSES_VERSION.tar.gz
	run tar xzf ncurses-$NCURSES_VERSION.tar.gz
	run rm ncurses-$NCURSES_VERSION.tar.gz
	echo "Entering $RUNTIME_DIR/gmp-$NCURSES_VERSION"
	pushd ncurses-$NCURSES_VERSION >/dev/null

	run ./configure --prefix="$RUNTIME_DIR" --with-shared --without-normal --without-cxx --without-cxx-binding \
		--without-ada --without-manpages --without-progs --without-tests --enable-pc-files \
		--without-develop
	run make -j$CONCURRENCY
	run make install
	echo "Entering $RUNTIME_DIR"
	popd >/dev/null
	run rm -rf ncurses-$NCURSES_VERSION

	run rm -f "$RUNTIME_DIR/lib"/{libpanel,libmenu,libform}*
	run rm -f "$RUNTIME_DIR/lib"/*.a
	run strip -S "$RUNTIME_DIR/lib"
	run ln -sf libncurses.5.dylib libtermcap.dylib
	run install_name_tool -id "@executable_path/../lib/libncurses.5.dylib" \
		"$RUNTIME_DIR/lib/libncurses.5.dylib"
else
	echo "Already installed."
fi
echo

header "Compiling runtime libraries 3/4: libedit..."
if $SKIP_LIBEDIT; then
	echo "Skipped."
elif [[ ! -e "$RUNTIME_DIR/lib/libedit.dylib" ]] || $FORCE_LIBEDIT; then
	run rm -f libedit-$LIBEDIT_VERSION.tar.gz
	run curl --fail -L -O http://thrysoee.dk/editline/libedit-$LIBEDIT_VERSION.tar.gz
	run tar xzf libedit-$LIBEDIT_VERSION.tar.gz
	run rm libedit-$LIBEDIT_VERSION.tar.gz
	echo "Entering $RUNTIME_DIR/libedit-$LIBEDIT_VERSION"
	pushd libedit-$LIBEDIT_DIR_VERSION >/dev/null

	run ./configure --prefix="$RUNTIME_DIR" --disable-static --enable-widec
	run make -j$CONCURRENCY
	run make install-strip
	echo "Entering $RUNTIME_DIR"
	popd >/dev/null
	run rm -rf libedit-$LIBEDIT_DIR_VERSION

	pushd "$RUNTIME_DIR/lib" >/dev/null
	run ln -sf libedit.0.dylib libreadline.dylib
	popd >/dev/null
	run install_name_tool -id "@executable_path/../lib/libedit.0.dylib" \
		"$RUNTIME_DIR/lib/libedit.0.dylib"
else
	echo "Already installed."
fi
echo

header "Compiling runtime libraries 4/4: gmp..."
if $SKIP_GMP; then
	echo "Skipped."
elif [[ ! -e "$RUNTIME_DIR/lib/libgmp.dylib" ]] || $FORCE_GMP; then
	run rm -f gmp-$GMP_VERSION.tar.bz2
	run curl --fail -L -O https://gmplib.org/download/gmp/gmp-$GMP_VERSION.tar.bz2
	run tar xjf gmp-$GMP_VERSION.tar.bz2
	run rm gmp-$GMP_VERSION.tar.bz2
	echo "Entering $RUNTIME_DIR/gmp-$GMP_VERSION"
	pushd gmp-$GMP_DIR_VERSION >/dev/null

	run ./configure --prefix="$RUNTIME_DIR" --disable-static --without-readline
	run make -j$CONCURRENCY
	run make install-strip
	echo "Entering $RUNTIME_DIR"
	popd >/dev/null
	run rm -rf gmp-$GMP_DIR_VERSION

	run install_name_tool -id "@executable_path/../lib/libgmp.10.dylib" \
		"$RUNTIME_DIR/lib/libgmp.10.dylib"
else
	echo "Already installed."
fi
echo

header "Downloading Ruby source..."
if $SKIP_RUBY; then
	echo "Skipped."
elif [[ ! -e "$RUNTIME_DIR/ruby.tar.gz" ]] || $FORCE_RUBY; then
	run rm -f "$RUNTIME_DIR/ruby.tar.gz"
	run curl --fail -L -o "$RUNTIME_DIR/ruby.tar.gz" \
		http://cache.ruby-lang.org/pub/ruby/$RUBY_MAJOR_MINOR/ruby-$RUBY_VERSION.tar.gz
else
	echo "Already downloaded."
fi
