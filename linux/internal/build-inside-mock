#!/bin/bash
set -e

source /system/library.sh

NAME=`cat /system/NAME`
APP_UID=`cat /system/APP_UID`
APP_GID=`cat /system/APP_GID`
RUBY_VERSION=`cat /system/RUBY_VERSION`
BUNDLER_VERSION=`cat /system/BUNDLER_VERSION`
CONCURRENCY=`cat /system/CONCURRENCY`
SETUP_SOURCE=`cat /system/SETUP_SOURCE`
COMPILE=`cat /system/COMPILE`
SANITY_CHECK_OUTPUT=`cat /system/SANITY_CHECK_OUTPUT`

# Ensure that our static libraries are used first.
export CFLAGS=-I/usr/local/override/include
export CXXFLAGS=-I/usr/local/override/include
export LDFLAGS=-L/usr/local/override/lib
export PATH=/usr/local/override/bin:$PATH
export C_INCLUDE_PATH=/usr/local/override/include
export CPLUS_INCLUDE_PATH=/usr/local/override/include
export LIBRARY_PATH=/usr/local/override/lib
export PKG_CONFIG_PATH=/usr/local/override/lib/pkgconfig:/usr/lib/pkgconfig
export PATH=/usr/local/override/bin:$PATH

function grep_without_fail()
{
	grep "$@" || true
}

function create_environment_file() {
	local FILE="$1"
	local LOAD_PATHS=`/tmp/ruby/bin.real/ruby /system/dump-load-paths.rb`
	cat > "$FILE" <<'EOF'
#!/bin/bash
ROOT=`dirname "$0"`
ROOT=`cd "$ROOT/.." && pwd`

echo ORIG_LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH\"
echo ORIG_SSL_CERT_DIR=\"$SSL_CERT_DIR\"
echo ORIG_SSL_CERT_FILE=\"$SSL_CERT_FILE\"
echo ORIG_RUBYOPT=\"$RUBYOPT\"
echo ORIG_RUBYLIB=\"$RUBYLIB\"

echo LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:$ROOT/lib\"
echo SSL_CERT_FILE=\"$ROOT/lib/cert.pem\"
echo RUBYOPT=\"-r$ROOT/lib/restore_environment\"
echo GEM_HOME=\"$ROOT/lib/ruby/gems/2.1.0\"
echo GEM_PATH=\"$ROOT/lib/ruby/gems/2.1.0\"
EOF
	cat >> "$FILE" <<EOF
echo RUBYLIB=\"$LOAD_PATHS\"

echo export ORIG_LD_LIBRARY_PATH
echo export ORIG_SSL_CERT_DIR
echo export ORIG_SSL_CERT_FILE
echo export ORIG_RUBYOPT
echo export ORIG_RUBYLIB

echo export LD_LIBRARY_PATH
echo unset  SSL_CERT_DIR
echo export SSL_CERT_FILE
echo export RUBYOPT
echo export GEM_HOME
echo export GEM_PATH
echo export RUBYLIB
EOF
	chmod +x "$FILE"
}

function create_wrapper()
{
	local FILE="$1"
	local NAME="$2"
	local IS_RUBY_SCRIPT="$3"

	cat > "$FILE" <<'EOF'
#!/bin/bash
set -e
ROOT=`dirname "$0"`
ROOT=`cd "$ROOT/.." && pwd`
eval "`\"$ROOT/bin/ruby_environment\"`"
EOF
	if $IS_RUBY_SCRIPT; then
		cat >> "$FILE" <<EOF
exec "\$ROOT/bin.real/ruby" "\$ROOT/bin.real/$NAME" "\$@"
EOF
	else
		cat >> "$FILE" <<EOF
exec "\$ROOT/bin.real/$NAME" "\$@"
EOF
	fi
	chmod +x "$FILE"
}

cd /tmp
echo


if $SETUP_SOURCE; then
	header "Extracting source code"
	run rm -rf /tmp/ruby-$RUBY_VERSION
	run tar xzf /ruby-$RUBY_VERSION.tar.gz
	echo "Entering ruby-$RUBY_VERSION"
	cd ruby-$RUBY_VERSION
	echo

	header "Configuring"
	run ./configure \
		--prefix /tmp/ruby \
		--disable-install-doc \
		--disable-install-rdoc \
		--disable-install-capi \
		--with-out-ext=tk,sdbm,gdbm,dbm,dl,coverage \
		--with-openssl-dir=/usr/local/override
	echo
else
	echo "Entering ruby-$RUBY_VERSION"
	cd ruby-$RUBY_VERSION
	echo
fi


if $COMPILE; then
	header "Compiling"
	run sed -i 's|dir_config("openssl")|$libs << " -lz "; dir_config("openssl")|' ext/openssl/extconf.rb
	run make -j$CONCURRENCY exts.mk
	run make -j$CONCURRENCY
	echo
fi


header "Installing into temporary prefix"
run rm -rf /tmp/ruby
run make install-nodoc
echo


header "Postprocessing build output"

# Copy over non-statically linked third-party libraries and other files.
if [[ "$NAME" = x86 ]]; then
	LIBDIR=/lib
	USRLIBDIR=/usr/lib
	FFILIBDIR=/usr/local/override/lib
else
	LIBDIR=/lib64
	USRLIBDIR=/usr/lib64
	FFILIBDIR=/usr/local/override/lib64
fi
run cp $LIBDIR/libz.so.1 /tmp/ruby/lib/
run cp $LIBDIR/libtermcap.so.2 /tmp/ruby/lib/
run cp $USRLIBDIR/libreadline.so.5 /tmp/ruby/lib/
run cp $FFILIBDIR/libffi.so.6 /tmp/ruby/lib/
run cp /etc/pki/tls/cert.pem /tmp/ruby/lib/
run cp /system/restore_environment.rb /tmp/ruby/lib/
export SSL_CERT_FILE=/tmp/ruby/lib/cert.pem

# Dump various information about the Ruby binaries.
RUBY_COMPAT_VERSION=`/tmp/ruby/bin/ruby -rrbconfig -e 'puts RbConfig::CONFIG["ruby_version"]'`
GEM_PLATFORM=`/tmp/ruby/bin/ruby -e 'puts Gem::Platform.local.to_s'`
GEM_EXTENSION_API_VERSION=`/tmp/ruby/bin/ruby -e 'puts Gem.extension_api_version'`
run mkdir /tmp/ruby/info
echo "+ Dumping information about the Ruby binaries into /tmp/ruby/info"
echo $RUBY_COMPAT_VERSION > /tmp/ruby/info/RUBY_COMPAT_VERSION
echo $GEM_PLATFORM > /tmp/ruby/info/GEM_PLATFORM
echo $GEM_EXTENSION_API_VERSION > /tmp/ruby/info/GEM_EXTENSION_API_VERSION

# Remove some standard dummy gems. We must do this before
# installing further gems in order to prevent accidentally
# removing explicitly gems.
run rm -rf /tmp/ruby/lib/ruby/gems/$RUBY_COMPAT_VERSION/gems/{test-unit,rdoc}-*

if [[ -e /system/gemfiles ]]; then
	run /tmp/ruby/bin/gem install bundler -v $BUNDLER_VERSION --no-rdoc --no-ri
	
	for GEMFILE in /system/gemfiles/*/Gemfile; do
		run cp "$GEMFILE" /tmp/ruby/
		if [[ -e "$GEMFILE.lock" ]]; then
			run cp "$GEMFILE.lock" /tmp/ruby/
		fi
		echo "+ Entering /tmp/ruby"
		pushd /tmp/ruby >/dev/null
		run /tmp/ruby/bin/bundle install --system --retry 3
		run rm Gemfile*
		echo "+ Leaving /tmp/ruby"
		popd >/dev/null
	done
fi

# Strip binaries and remove unnecessary files.
run strip --strip-all /tmp/ruby/bin/ruby
(
	set -o pipefail
	echo "+ Stripping .so files"
	find /tmp/ruby -name '*.so' | xargs strip --strip-debug
)
if [[ $? != 0 ]]; then
	exit
fi
run rm /tmp/ruby/bin/{erb,rdoc,ri,testrb}
run rm -rf /tmp/ruby/share
run rm -rf /tmp/ruby/lib/{libruby-static.a,pkgconfig}
run rm -f /tmp/ruby/lib/ruby/gems/$RUBY_COMPAT_VERSION/cache/*
run rm -f /tmp/ruby/lib/ruby/gems/$RUBY_COMPAT_VERSION/extensions/$GEM_PLATFORM/$GEM_EXTENSION_API_VERSION/*/{gem_make.out}
run rm -rf /tmp/ruby/lib/ruby/gems/$RUBY_COMPAT_VERSION/gems/*/{test,spec,*.md,*.rdoc}
run rm -rf /tmp/ruby/lib/ruby/gems/$RUBY_COMPAT_VERSION/gems/*/ext/*/*.{c,h}

# Create wrapper scripts
mv /tmp/ruby/bin /tmp/ruby/bin.real
mkdir /tmp/ruby/bin
create_environment_file /tmp/ruby/bin/ruby_environment
create_wrapper /tmp/ruby/bin/ruby ruby false
create_wrapper /tmp/ruby/bin/gem gem true
create_wrapper /tmp/ruby/bin/irb irb true
create_wrapper /tmp/ruby/bin/rake rake true
if [[ -e /system/Gemfile ]]; then
	create_wrapper /tmp/ruby/bin/bundle bundle true
	create_wrapper /tmp/ruby/bin/bundler bundler true
fi
echo

if $SANITY_CHECK_OUTPUT; then
	header "Sanity checking build output"
	(
		SYSTEM_LIBRARIES="(linux-gate|linux-vdso|libpthread|librt|libdl|libcrypt|libm|libc"
		SYSTEM_LIBRARIES="$SYSTEM_LIBRARIES|ld-linux.*|libutil|libz|libxslt|libxml2|libreadline"
		SYSTEM_LIBRARIES="$SYSTEM_LIBRARIES|libtermcap|libffi|libnsl)\.so"
		ERROR=false
		set -o pipefail
		for F in /tmp/ruby/bin.real/ruby `find /tmp/ruby -name '*.so'`; do
			EXTRA_LIBS=`ldd $F | grep_without_fail -vE "$SYSTEM_LIBRARIES" | sed 's/.*=> //g' | sed 's/ (.*//g'`
			EXTRA_LIBS=`echo $EXTRA_LIBS`
			if [[ "$EXTRA_LIBS" != "" ]]; then
				echo "$F is linked to non-system libraries: $EXTRA_LIBS"
				ERROR=true
			fi
		done
		if [[ $? != 0 ]]; then
			exit 1
		fi
		if $ERROR; then
			exit 1
		else
			echo "All OK"
		fi
	)
	if [[ $? != 0 ]]; then
		exit 1
	fi
	echo
fi

header "Committing build output"
run chown -R $APP_UID:$APP_GID /tmp/ruby
run mv /tmp/ruby/* /output/
