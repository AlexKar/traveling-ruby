#!/bin/bash
set -e
source /system/config.sh
NAME=`cat /system/NAME`
APP_UID=`cat /system/APP_UID`
APP_GID=`cat /system/APP_GID`
CONCURRENCY=`cat /system/CONCURRENCY`
SETUP_SOURCE=`cat /system/SETUP_SOURCE`
COMPILE=`cat /system/COMPILE`
INSTALL_GEMS=`cat /system/INSTALL_GEMS`
SANITY_CHECK_OUTPUT=`cat /system/SANITY_CHECK_OUTPUT`

# Ensure that our static libraries are used first.
export CFLAGS=-I/usr/local/override/include
export CXXFLAGS=-I/usr/local/override/include
export LDFLAGS=-L/usr/local/override/lib
export PATH=/usr/local/override/bin:$PATH
export C_INCLUDE_PATH=/usr/local/override/include
export CPLUS_INCLUDE_PATH=/usr/local/override/include
export LIBRARY_PATH=/usr/local/override/lib
export PKG_CONFIG_PATH=/usr/local/override/lib/pkgconfig:/usr/lib/pkgconfig

function grep_without_fail()
{
	grep "$@" || true
}

function create_environment_file() {
	local FILE="$1"
	local LOAD_PATHS=`/tmp/ruby/bin.real/ruby /system/dump-load-paths.rb`
	cat > "$FILE" <<'EOF'
#!/bin/bash
ROOT=`dirname "$0"`
ROOT=`cd "$ROOT/.." && pwd`

echo ORIG_LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH\"
echo ORIG_SSL_CERT_DIR=\"$SSL_CERT_DIR\"
echo ORIG_SSL_CERT_FILE=\"$SSL_CERT_FILE\"
echo ORIG_RUBYOPT=\"$RUBYOPT\"
echo ORIG_RUBYLIB=\"$RUBYLIB\"

echo LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:$ROOT/lib\"
echo SSL_CERT_FILE=\"$ROOT/lib/cert.pem\"
echo RUBYOPT=\"-r$ROOT/lib/restore_environment\"
echo GEM_HOME=\"$ROOT/lib/ruby/gems/2.1.0\"
echo GEM_PATH=\"$ROOT/lib/ruby/gems/2.1.0\"
EOF
	cat >> "$FILE" <<EOF
echo RUBYLIB=\"$LOAD_PATHS\"

echo export ORIG_LD_LIBRARY_PATH
echo export ORIG_SSL_CERT_DIR
echo export ORIG_SSL_CERT_FILE
echo export ORIG_RUBYOPT
echo export ORIG_RUBYLIB

echo export LD_LIBRARY_PATH
echo unset  SSL_CERT_DIR
echo export SSL_CERT_FILE
echo export RUBYOPT
echo export GEM_HOME
echo export GEM_PATH
echo export RUBYLIB
EOF
	chmod +x "$FILE"
}

function create_wrapper()
{
	local FILE="$1"
	local NAME="$2"
	local IS_RUBY_SCRIPT="$3"

	cat > "$FILE" <<'EOF'
#!/bin/bash
set -e
ROOT=`dirname "$0"`
ROOT=`cd "$ROOT/.." && pwd`
eval "`\"$ROOT/bin/ruby_environment\"`"
EOF
	if $IS_RUBY_SCRIPT; then
		cat >> "$FILE" <<EOF
exec "\$ROOT/bin.real/ruby" "\$ROOT/bin.real/$NAME" "\$@"
EOF
	else
		cat >> "$FILE" <<EOF
exec "\$ROOT/bin.real/$NAME" "\$@"
EOF
	fi
	chmod +x "$FILE"
}

cd /tmp

if $SETUP_SOURCE; then
	echo "--------- Extracting source code ---------"
	(
		set -x
		rm -rf /tmp/ruby-$RUBY_VERSION
		tar xzf /ruby-$RUBY_VERSION.tar.gz
	)
	if [[ $? != 0 ]]; then
		exit 1
	fi
	echo "+ cd ruby-$RUBY_VERSION"
	cd ruby-$RUBY_VERSION

	echo
	echo "--------- Configuring ---------"
	(
		set -o pipefail
		set -x
		./configure \
			--prefix /tmp/ruby \
			--disable-install-doc \
			--disable-install-rdoc \
			--disable-install-capi \
			--with-openssl-dir=/usr/local/override
	)
	if [[ $? != 0 ]]; then
		exit 1
	fi
else
	echo "+ cd ruby-$RUBY_VERSION"
	cd ruby-$RUBY_VERSION
fi

if $COMPILE; then
	echo
	echo "--------- Compiling ---------"
	(
		set -x

		# Make the OpenSSL extension static link to zlib.
		sed -i 's|dir_config("openssl")|$libs << " -lz "; dir_config("openssl")|' ext/openssl/extconf.rb
		make -j$CONCURRENCY exts.mk

		# Edit Makefiles so that we link to static versions of third-party libraries.
		MAKEFILES=`find . -name Makefile`
		if [[ "$NAME" = x86 ]]; then
			sed -i 's| -lreadline | /usr/lib/libreadline.a |g' $MAKEFILES
			sed -i 's| -ltermcap | /usr/lib/libtermcap.a |g' $MAKEFILES
		else
			sed -i 's| -lreadline | /usr/lib64/libreadline.a |g' $MAKEFILES
			sed -i 's| -ltermcap | /usr/lib64/libtermcap.a |g' $MAKEFILES
		fi

		make -j$CONCURRENCY
	)
	if [[ $? != 0 ]]; then
		exit 1
	fi
fi

echo
echo "--------- Installing into temporary prefix ---------"
(
	set -x
	rm -rf /tmp/ruby
	make install-nodoc
)

echo
echo "--------- Postprocessing build output ---------"
(
	set -o pipefail
	set -x

	# Copy over non-statically linked third-party libraries and other files.
	if [[ "$NAME" = x86 ]]; then
		cp /lib/libz.so.1 /tmp/ruby/lib/
		cp /usr/lib/libxslt.so.1 /tmp/ruby/lib/
		cp /usr/lib/libxml2.so.2 /tmp/ruby/lib/
	else
		cp /lib64/libz.so.1 /tmp/ruby/lib/
		cp /usr/lib64/libxslt.so.1 /tmp/ruby/lib/
		cp /usr/lib64/libxml2.so.2 /tmp/ruby/lib/
	fi
	cp /etc/pki/tls/cert.pem /tmp/ruby/lib/
	cp /system/restore_environment.rb /tmp/ruby/lib/

	if $INSTALL_GEMS; then
		export SSL_CERT_FILE=/tmp/ruby/lib/cert.pem
		/tmp/ruby/bin/gem install nokogiri --no-rdoc --no-ri
	fi

	# Strip binaries and remove unnecessary files.
	strip --strip-all /tmp/ruby/bin/ruby
	find /tmp/ruby -name '*.so' | xargs strip --strip-debug
	rm /tmp/ruby/bin/{erb,rdoc,ri,testrb} /tmp/ruby/lib/libruby-static.a

	# Create wrapper scripts
	mv /tmp/ruby/bin /tmp/ruby/bin.real
	mkdir /tmp/ruby/bin
	create_environment_file /tmp/ruby/bin/ruby_environment
	cat /tmp/ruby/bin/ruby_environment
	create_wrapper /tmp/ruby/bin/ruby ruby false
	create_wrapper /tmp/ruby/bin/gem gem true
	create_wrapper /tmp/ruby/bin/irb irb true
)
if [[ $? != 0 ]]; then
	exit 1
fi

if $SANITY_CHECK_OUTPUT; then
	echo
	echo "--------- Sanity checking build output ---------"
	(
		SYSTEM_LIBRARIES="(linux-gate|linux-vdso|libpthread|librt|libdl|libcrypt|libm|libc"
		SYSTEM_LIBRARIES="$SYSTEM_LIBRARIES|ld-linux.*|libutil|libz|libxslt|libxml2)\.so"
		ERROR=false
		set -o pipefail
		for F in /tmp/ruby/bin.real/ruby `find /tmp/ruby -name '*.so'`; do
			EXTRA_LIBS=`ldd $F | grep_without_fail -vE "$SYSTEM_LIBRARIES" | sed 's/.*=> //g' | sed 's/ (.*//g'`
			EXTRA_LIBS=`echo $EXTRA_LIBS`
			if [[ "$EXTRA_LIBS" != "" ]]; then
				echo "$F is linked to non-system libraries: $EXTRA_LIBS"
				ERROR=true
			fi
		done
		if [[ $? != 0 ]]; then
			exit 1
		fi
		if $ERROR; then
			exit 1
		else
			echo "All OK"
		fi
	)
	if [[ $? != 0 ]]; then
		exit 1
	fi
fi

echo
echo "--------- Committing build output ---------"
(
	set -x
	chown -R $APP_UID:$APP_GID /tmp/ruby
	mv /tmp/ruby/* /output/
)
if [[ $? != 0 ]]; then
	exit 1
fi
