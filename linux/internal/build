#!/bin/bash
set -e
source /system/library.sh

function do_build()
{
	local chroot_name="$1"
	local name="$2"
	local root=/var/lib/mock/$chroot_name/root

	# Initialize parameters
	rm -rf $root/system $root/output
	mkdir $root/system $root/output
	cp /system/* $root/system/
	cp /system_shared/* $root/system/
	if [[ -e /Gemfile ]]; then
		cp /Gemfile $root/system/
	fi
	if [[ -e /Gemfile.lock ]]; then
		cp /Gemfile.lock $root/system/
	fi
	echo $name > $root/system/NAME
	echo $APP_UID > $root/system/APP_UID
	echo $APP_GID > $root/system/APP_GID
	echo $RUBY_VERSION > $root/system/RUBY_VERSION
	echo $CONCURRENCY > $root/system/CONCURRENCY
	echo $SETUP_SOURCE > $root/system/SETUP_SOURCE
	echo $COMPILE > $root/system/COMPILE
	echo $SANITY_CHECK_OUTPUT > $root/system/SANITY_CHECK_OUTPUT

	# Build the binaries
	/system/setuser app /usr/bin/mock -r $chroot_name --quiet --shell /system/build-inside-mock

	# Move build result to proper output directory
	chown $APP_UID:$APP_GID /output
	cp -dpR $root/output/* /output/

	# Cleanup
	rm -rf $root/system $root/output
}

header "Building binaries"
if [[ "$ARCHITECTURE" = x86 ]]; then
	CHROOT_NAME=epel-5-i386
else
	CHROOT_NAME=epel-5-x86_64
fi
(
	set -x
	do_build $CHROOT_NAME $ARCHITECTURE
)
if [[ $? != 0 ]]; then
	exit 1
fi
